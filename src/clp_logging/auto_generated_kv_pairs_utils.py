import logging
from typing import Any, Dict, Optional

ZONED_TIMESTAMP_KEY: str = "zoned_timestamp"
ZONED_TIMESTAMP_UTC_EPOCH_MS_KEY: str = "utc_epoch_ms"
ZONED_TIMESTAMP_TZ_KEY: str = "timezone"

LEVEL_KEY: str = "level"
LEVEL_NO_KEY: str = "no"
LEVEL_NAME_KEY: str = "name"

SOURCE_CONTEXT_KEY: str = "source_context"
SOURCE_CONTEXT_PATH_KEY: str = "path"
SOURCE_CONTEXT_LINE_KEY: str = "line"

LOGLIB_GENERATED_MSG_KEY: str = "loglib_generated_msg"


class AutoGeneratedKeyValuePairsBuffer:
    """
    A reusable buffer for auto-generated key-value pairs.

    This buffer maintains a predefined dictionary for common metadata fields,
    to enable efficient reuse without creating new dictionaries for each log
    event.
    """

    def __init__(self) -> None:
        self._buf: Dict[str, Any] = {
            ZONED_TIMESTAMP_KEY: {
                ZONED_TIMESTAMP_UTC_EPOCH_MS_KEY: None,
                ZONED_TIMESTAMP_TZ_KEY: None,
            },
            LEVEL_KEY: {
                LEVEL_NO_KEY: None,
                LEVEL_NAME_KEY: None,
            },
            SOURCE_CONTEXT_KEY: {
                SOURCE_CONTEXT_PATH_KEY: None,
                SOURCE_CONTEXT_LINE_KEY: None,
            },
        }

    def generate(
        self, timestamp: int, timezone: Optional[str], record: logging.LogRecord
    ) -> Dict[str, Any]:
        """
        Generates the auto-generated key-value pairs by populating the
        underlying buffer with the given log event metadata.

        :param timestamp: The log event's millisecond Unix timestamp.
        :param timezone: The timezone of the log event, or `None` if UTC.
        :param record: The LogRecord containing metadata for the log event.
        :return: The populated underlying buffer as the auto-generated key-value
            pairs.
        """

        self._buf[ZONED_TIMESTAMP_KEY][ZONED_TIMESTAMP_UTC_EPOCH_MS_KEY] = timestamp
        self._buf[ZONED_TIMESTAMP_KEY][ZONED_TIMESTAMP_TZ_KEY] = timezone

        # NOTE: We don't add all the metadata contained in `record`. Instead, we only add the
        # following fields:
        # - Log level
        # - Source context

        self._buf[LEVEL_KEY][LEVEL_NO_KEY] = record.levelno
        self._buf[LEVEL_KEY][LEVEL_NAME_KEY] = record.levelname

        self._buf[SOURCE_CONTEXT_KEY][SOURCE_CONTEXT_PATH_KEY] = record.pathname
        self._buf[SOURCE_CONTEXT_KEY][SOURCE_CONTEXT_LINE_KEY] = record.lineno

        return self._buf


def create_loglib_generated_log_event_as_auto_generated_kv_pairs(
    timestamp: int, timezone: Optional[str], msg: str
) -> Dict[str, Any]:
    """
    :param timestamp: The log event's millisecond Unix timestamp.
    :param timezone: The timezone of the log event, or `None` if UTC.
    :param msg: The log message generated by the logging library.
    :return: The auto-generated key-value pairs that represent a log event generated by the logging
    library itself.
    """
    return {
        ZONED_TIMESTAMP_KEY: {
            ZONED_TIMESTAMP_UTC_EPOCH_MS_KEY: timestamp,
            ZONED_TIMESTAMP_TZ_KEY: timezone,
        },
        LOGLIB_GENERATED_MSG_KEY: msg,
    }
